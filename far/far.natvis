<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- Override the default visualizer - it doesn't have StringView node :( -->
	<Type Name="std::basic_string_view&lt;*,*&gt;">
		<Intrinsic Name="data" Expression="_Mydata" />
		<Intrinsic Name="size" Expression="_Mysize" />
		<DisplayString>{data(),[size()]na}</DisplayString>
		<StringView>data(),[size()]na</StringView>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<ArrayItems>
				<Size>size()</Size>
				<ValuePointer>data()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<!-- Override the default visualizer - its DisplayString is not good enough -->
	<Type Name="std::span&lt;*&gt;">
		<Intrinsic Name="data" Expression="_Mydata" />
		<Intrinsic Name="size" Expression="_Mysize" />
		<DisplayString>{data(),[size()]na}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<ArrayItems>
				<Size>size()</Size>
				<ValuePointer>data()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="range&lt;*&gt;">
		<DisplayString>{m_Begin,[m_End - m_Begin]na}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">m_End - m_Begin</Item>
			<ArrayItems>
				<Size>m_End - m_Begin</Size>
				<ValuePointer>m_Begin</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="matrix_view&lt;*&gt;">
		<Expand>
			<CustomListItems>
				<Variable Name="i" InitialValue="0"/>
				<Loop>
					<Item Name="row[{i}]">m_Data + i * m_Cols,[m_Cols]na</Item>
					<Exec>++i</Exec>
					<If Condition="i == m_Rows">
						<Break/>
					</If>
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="rectangle_t&lt;*&gt;">
		<DisplayString>[{left} {top} {right} {bottom}]</DisplayString>
		<Expand>
			<Item Name="left">left</Item>
			<Item Name="top">top</Item>
			<Item Name="right">right</Item>
			<Item Name="bottom">bottom</Item>
			<Item Name="width()" ExcludeView="simple">right - left + 1</Item>
			<Item Name="height()" ExcludeView="simple">bottom - top + 1</Item>
		</Expand>
	</Type>

	<Type Name="monitored&lt;*&gt;">
		<DisplayString>{m_Value} [touched={m_Touched}]</DisplayString>
		<StringView>m_Value</StringView>
		<Expand>
			<ExpandedItem>m_Value</ExpandedItem>
			<Item Name="[touched]" ExcludeView="simple">m_Touched</Item>
		</Expand>
	</Type>

	<Type Name="detail::OptionImpl&lt;*,*&gt;">
		<DisplayString>{m_Value}</DisplayString>
		<StringView>m_Value</StringView>
		<Expand>
			<ExpandedItem>m_Value</ExpandedItem>
			<Item Name="[callback]" ExcludeView="simple">m_Callback</Item>
		</Expand>
	</Type>

	<Type Name="movable&lt;*&gt;">
		<DisplayString>{m_Value}</DisplayString>
		<StringView>m_Value</StringView>
	</Type>

	<Type Name="os::detail::handle_t&lt;*&gt;">
		<Intrinsic Name="get" Expression="_Mypair._Myval2" />
		<DisplayString Condition="!get()">empty</DisplayString>
		<DisplayString>{get(),handle}</DisplayString>
	</Type>

	<Type Name="array_ptr&lt;*,*&gt;">
		<Intrinsic Name="data" Expression="_Mydata" />
		<Intrinsic Name="size" Expression="_Mysize" />
		<Intrinsic Name="empty" Expression="!size()"/>
		<Intrinsic Name="dynamic" Expression="size() &gt; StaticSize"/>
		<DisplayString Condition="empty()">empty</DisplayString>
		<DisplayString Condition="!empty()">size={size()}, dynamic={dynamic()}</DisplayString>
		<Expand>
			<Item Name="[size]">size()</Item>
			<Item Name="[dynamic]">dynamic()</Item>
			<ArrayItems Condition="!empty()">
				<Size>size()</Size>
				<ValuePointer>data()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="block_ptr&lt;*,*&gt;">
		<Intrinsic Name="data" Expression="_Mydata" />
		<Intrinsic Name="size" Expression="_Mysize" />
		<Intrinsic Name="empty" Expression="!size()"/>
		<Expand>
			<Synthetic Name="[Buffer]">
				<DisplayString>{(array_ptr&lt;char,$T2&gt;&amp;)*this}</DisplayString>
				<Expand>
					<ExpandedItem>(array_ptr&lt;char,$T2&gt;&amp;)*this</ExpandedItem>
				</Expand>
			</Synthetic>
			<ExpandedItem Condition="!empty()">($T1*)data()</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="os::error_state">
		<DisplayString>{{Win32Error={Win32Error,h} NtError={NtError,h}}}</DisplayString>
		<Expand>
			<Item Name="Win32Error">Win32Error,hr</Item>
			<Item Name="NtError">NtError,hr</Item>
		</Expand>
	</Type>

	<Type Name="error_state_ex">
		<DisplayString>{{{(*(os::error_state*)this)} errno={Errno} What={What}}}</DisplayString>
		<Expand>
			<ExpandedItem>(*(os::error_state*)this)</ExpandedItem>
			<Item Name="errno">Errno</Item>
			<Item Name="What">What</Item>
		</Expand>
	</Type>


	<Type Name="color_index">
		<Intrinsic Name="index_red"   Expression="(i - 16) / 36"/>
		<Intrinsic Name="index_green" Expression="(i - 16) % 36 / 6"/>
		<Intrinsic Name="index_blue"  Expression="(i - 16) % 6"/>
		<Intrinsic Name="index_grey"  Expression="23 - (255 - i)"/>

		<DisplayString Condition="i == 0x0">{{{i,nvo} (black) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x1">{{{i,nvo} (navy) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x2">{{{i,nvo} (green) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x3">{{{i,nvo} (teal) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x4">{{{i,nvo} (maroon) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x5">{{{i,nvo} (purple) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x6">{{{i,nvo} (olive) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x7">{{{i,nvo} (silver) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x8">{{{i,nvo} (gray) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0x9">{{{i,nvo} (blue) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xa">{{{i,nvo} (lime) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xb">{{{i,nvo} (aqua) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xc">{{{i,nvo} (red) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xd">{{{i,nvo} (fuchsia) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xe">{{{i,nvo} (yellow) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i == 0xf">{{{i,nvo} (white) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i&gt;0xe7">{{{i,nvo} (grey {index_grey()}) {a,nvo}}}</DisplayString>
		<DisplayString Condition="i&gt;0xf">{{{i,nvo}  ({index_red()} {index_green()} {index_blue()}) {a,nvo}}}</DisplayString>
		<Expand>
			<Item      Name="index" Condition="i&lt;0x10">i,nvo</Item>
			<Synthetic Name="index" Condition="i&gt;0xf">
				<DisplayString>{i,nvo}</DisplayString>
				<Expand>
					<Item Name="index">i,nvo</Item>
					<Item Name="red"   Condition="i&lt;0xe8">index_red()</Item>
					<Item Name="green" Condition="i&lt;0xe8">index_green()</Item>
					<Item Name="blue"  Condition="i&lt;0xe8">index_blue()</Item>
					<Item Name="grey"  Condition="i&gt;0xe7">index_grey()</Item>
				</Expand>
			</Synthetic>
			<Item Name="alpha">a,nvo</Item>
		</Expand>
	</Type>

	<Type Name="rgba">
		<DisplayString>{{{r,nvo} {g,nvo} {b,nvo} {a,nvo}}}</DisplayString>
		<Expand>
			<Item Name="red"  >r,nvo</Item>
			<Item Name="green">g,nvo</Item>
			<Item Name="blue" >b,nvo</Item>
			<Item Name="alpha">a,nvo</Item>
		</Expand>
	</Type>

	<Type Name="FarColor">
		<!-- BUGBUG VS debugger can't inspect "constexpr inline" constants -->
		<Intrinsic Name="is_f_index"    Expression="(Flags &amp; 0x0000000000000001) != 0"/>
		<Intrinsic Name="is_b_index"    Expression="(Flags &amp; 0x0000000000000002) != 0"/>
		<Intrinsic Name="is_inherit"    Expression="(Flags &amp; 0x0000000000000004) != 0"/>
		<Intrinsic Name="is_bold"       Expression="(Flags &amp; 0x1000000000000000) != 0"/>
		<Intrinsic Name="is_italic"     Expression="(Flags &amp; 0x2000000000000000) != 0"/>
		<Intrinsic Name="is_underline"  Expression="(Flags &amp; 0x4000000000000000) != 0"/>
		<Intrinsic Name="is_underline2" Expression="(Flags &amp; 0x8000000000000000) != 0"/>
		<Intrinsic Name="is_overline"   Expression="(Flags &amp; 0x0100000000000000) != 0"/>
		<Intrinsic Name="is_strikeout"  Expression="(Flags &amp; 0x0200000000000000) != 0"/>
		<Intrinsic Name="is_faint"      Expression="(Flags &amp; 0x0400000000000000) != 0"/>
		<Intrinsic Name="is_blink"      Expression="(Flags &amp; 0x0800000000000000) != 0"/>
		<Intrinsic Name="is_inverse"    Expression="(Flags &amp; 0x0010000000000000) != 0"/>
		<Intrinsic Name="is_invisible"  Expression="(Flags &amp; 0x0020000000000000) != 0"/>

		<Expand>
			<Synthetic Name="Foreground">
				<DisplayString Condition="is_f_index()">{ForegroundIndex}</DisplayString>
				<DisplayString Condition="!is_f_index()">{ForegroundRGBA}</DisplayString>
				<Expand>
					<ExpandedItem Condition="is_f_index()">ForegroundIndex</ExpandedItem>
					<ExpandedItem Condition="!is_f_index()">ForegroundRGBA</ExpandedItem>
				</Expand>
			</Synthetic>
			<Synthetic Name="Background">
				<DisplayString Condition="is_f_index()">{BackgroundIndex}</DisplayString>
				<DisplayString Condition="!is_f_index()">{BackgroundRGBA}</DisplayString>
				<Expand>
					<ExpandedItem Condition="is_f_index()">BackgroundIndex</ExpandedItem>
					<ExpandedItem Condition="!is_f_index()">BackgroundRGBA</ExpandedItem>
				</Expand>
			</Synthetic>
			<Synthetic Name="Style">
				<DisplayString>
					{int(is_inherit())}|
					{int(is_bold())}|
					{int(is_italic())}|
					{int(is_underline())}|
					{int(is_underline2())}|
					{int(is_overline())}|
					{int(is_strikeout())}|
					{int(is_faint())}|
					{int(is_blink())}|
					{int(is_inverse())}|
					{int(is_invisible())}
				</DisplayString>
				<Expand>
					<Item Name="inherit">is_inherit()</Item>
					<Item Name="bold">is_bold()</Item>
					<Item Name="italic">is_italic()</Item>
					<Item Name="underline">is_underline()</Item>
					<Item Name="underline2">is_underline2()</Item>
					<Item Name="overline">is_overline()</Item>
					<Item Name="strikeout">is_strikeout()</Item>
					<Item Name="faint">is_faint()</Item>
					<Item Name="blink">is_blink()</Item>
					<Item Name="inverse">is_inverse()</Item>
					<Item Name="invisible">is_invisible()</Item>
				</Expand>
			</Synthetic>
			<Item Name="LVB">char((Flags &amp; 0x000000000000FF00) &gt;&gt; 8),nvoh</Item>
		</Expand>
	</Type>

	<Type Name="FAR_CHAR_INFO">
		<DisplayString>{&amp;Char,[1]sub}</DisplayString>
	</Type>

	<Type Name="std::chrono::duration&lt;*, std::ratio&lt;*,*&gt;&gt;">
		<Intrinsic Name="ticks_in_second"       Expression="$T1(1) * $T3 / $T2"/>
		<Intrinsic Name="ticks_in_nanosecond"   Expression="ticks_in_second()? ticks_in_second() / 1000000000 : 0"/>
		<Intrinsic Name="ticks_in_microsecond"  Expression="ticks_in_second()? ticks_in_second() / 1000000    : 0"/>
		<Intrinsic Name="ticks_in_millisecond"  Expression="ticks_in_second()? ticks_in_second() / 1000       : 0"/>
		<Intrinsic Name="ticks_in_minute"       Expression="ticks_in_second()? ticks_in_second() * 60         :           60 * $T1(1) * $T3 / $T2"/>
		<Intrinsic Name="ticks_in_hour"         Expression="ticks_in_minute()? ticks_in_minute() * 60         :      60 * 60 * $T1(1) * $T3 / $T2"/>
		<Intrinsic Name="ticks_in_day"          Expression="ticks_in_hour()?   ticks_in_hour()   * 24         : 24 * 60 * 60 * $T1(1) * $T3 / $T2"/>

		<Intrinsic Name="count"        Expression="_MyRep"/>

		<Intrinsic Name="days"         Expression="                                                     count()                          / ticks_in_day()"/>
		<Intrinsic Name="hours"        Expression="                             ticks_in_hour()?        count() % ticks_in_day()         / ticks_in_hour()        : count() % ticks_in_day()         * 24   / ticks_in_day()"/>
		<Intrinsic Name="minutes"      Expression="!ticks_in_hour()?        0 : ticks_in_minute()?      count() % ticks_in_hour()        / ticks_in_minute()      : count() % ticks_in_hour()        * 60   / ticks_in_hour()"/>
		<Intrinsic Name="seconds"      Expression="!ticks_in_minute()?      0 : ticks_in_second()?      count() % ticks_in_minute()      / ticks_in_second()      : count() % ticks_in_minute()      * 60   / ticks_in_minute()"/>
		<Intrinsic Name="milliseconds" Expression="!ticks_in_second()?      0 : ticks_in_millisecond()? count() % ticks_in_second()      / ticks_in_millisecond() : count() % ticks_in_second()      * 1000 / ticks_in_second()"/>
		<Intrinsic Name="microseconds" Expression="!ticks_in_millisecond()? 0 : ticks_in_microsecond()? count() % ticks_in_millisecond() / ticks_in_microsecond() : count() % ticks_in_millisecond() * 1000 / ticks_in_millisecond()"/>
		<Intrinsic Name="nanoseconds"  Expression="!ticks_in_microsecond()? 0 : ticks_in_nanosecond()?  count() % ticks_in_microsecond() / ticks_in_nanosecond()  : count() % ticks_in_microsecond() * 1000 / ticks_in_microsecond()"/>

		<DisplayString>[{days()}d {hours()}h {minutes()}m {seconds()}s]</DisplayString>

		<Expand>
			<Item Name="days"         ExcludeView="timepoint"           >days()</Item>
			<Item Name="hours"                                          >hours()</Item>
			<Item Name="minutes"      Condition="ticks_in_hour()"       >minutes()</Item>
			<Item Name="seconds"      Condition="ticks_in_minute()"     >seconds()</Item>
			<Item Name="milliseconds" Condition="ticks_in_second()"     >milliseconds()</Item>
			<Item Name="microseconds" Condition="ticks_in_millisecond()">microseconds()</Item>
			<Item Name="nanoseconds"  Condition="ticks_in_microsecond()">nanoseconds()</Item>
		</Expand>
	</Type>


	<Type Name="std::chrono::time_point&lt;os::chrono::nt_clock, std::chrono::duration&lt;*, std::ratio&lt;*,*&gt;&gt;&gt;">
		<Intrinsic Name="count"                 Expression="_MyDur.count()"/>

		<Intrinsic Name="days"                  Expression="count() / _MyDur.ticks_in_day()"/>
		<Intrinsic Name="y400"                  Expression="days() / 146097"/>
		<Intrinsic Name="y100"                  Expression="((days() - y400() * 146097) * 100 + 75) / 3652425"/>
		<Intrinsic Name="y4"                    Expression="(days() - y400() * 146097 - y100() * 36524) / 1461"/>
		<Intrinsic Name="years"                 Expression="1601 + y400() * 400 + y100() * 100 + y4() * 4 + ((days() - y400() * 146097 - y100() * 36524 - y4() * 1461) * 100 + 75) / 36525"/>
		<Intrinsic Name="years_to_days"         Expression="years * 365 + years / 4 - years / 100 + years / 400">
			<Parameter Type="int" Name="years"/>
		</Intrinsic>
		<Intrinsic Name="is_leap"               Expression="!(years % 400) || ((years % 100) &amp;&amp; !(years % 4))">
			<Parameter Type="int" Name="years"/>
		</Intrinsic>
		<Intrinsic Name="days_y"                Expression="1 + days() - years_to_days(years() - 1601)"/>

		<Intrinsic Name="m01" Expression="31"/>
		<Intrinsic Name="m02" Expression="28 + m01() + is_leap(years())"/>
		<Intrinsic Name="m03" Expression="31 + m02()"/>
		<Intrinsic Name="m04" Expression="30 + m03()"/>
		<Intrinsic Name="m05" Expression="31 + m04()"/>
		<Intrinsic Name="m06" Expression="30 + m05()"/>
		<Intrinsic Name="m07" Expression="31 + m06()"/>
		<Intrinsic Name="m08" Expression="31 + m07()"/>
		<Intrinsic Name="m09" Expression="30 + m08()"/>
		<Intrinsic Name="m10" Expression="31 + m09()"/>
		<Intrinsic Name="m11" Expression="30 + m10()"/>

		<Intrinsic Name="month" Expression="
			days_y() &lt;= m01()?  1 :
			days_y() &lt;= m02()?  2 :
			days_y() &lt;= m03()?  3 :
			days_y() &lt;= m04()?  4 :
			days_y() &lt;= m05()?  5 :
			days_y() &lt;= m06()?  6 :
			days_y() &lt;= m07()?  7 :
			days_y() &lt;= m08()?  8 :
			days_y() &lt;= m09()?  9 :
			days_y() &lt;= m10()? 10 :
			days_y() &lt;= m11()? 11 :
			                      12
		"/>

		<Intrinsic Name="day" Expression="
			days_y() &lt;= m01()? days_y() :
			days_y() &lt;= m02()? days_y() - m01() :
			days_y() &lt;= m03()? days_y() - m02() :
			days_y() &lt;= m04()? days_y() - m03() :
			days_y() &lt;= m05()? days_y() - m04() :
			days_y() &lt;= m06()? days_y() - m05() :
			days_y() &lt;= m07()? days_y() - m06() :
			days_y() &lt;= m08()? days_y() - m07() :
			days_y() &lt;= m09()? days_y() - m08() :
			days_y() &lt;= m10()? days_y() - m09() :
			days_y() &lt;= m11()? days_y() - m10() :
			                      days_y() - m11()
		"/>

		<DisplayString>[{years()}-{month()}-{day()} {_MyDur.hours()}:{_MyDur.minutes()}:{_MyDur.seconds()}]</DisplayString>

		<Expand>
			<Item Name="year">years()</Item>
			<Item Name="month">month()</Item>
			<Item Name="day">day()</Item>
			<ExpandedItem>_MyDur,view(timepoint)</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="_FILETIME">
		<Intrinsic Name="as_nt_timepoint" Expression="*(os::chrono::time_point*)(this)"/>
		<DisplayString>{as_nt_timepoint()}</DisplayString>
		<Expand>
			<!-- Same 64-bit representation, save typing -->
			<ExpandedItem>as_nt_timepoint()</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="std::chrono::time_point&lt;*&gt;">
		<Expand>
			<Item Name="time_since_epoch()">_MyDur</Item>
		</Expand>
	</Type>

	<Type Name="_KEY_EVENT_RECORD">
		<Expand>
			<Item Name="KeyDown">bKeyDown != 0</Item>
			<Item Name="Count">wRepeatCount</Item>
			<Item Name="VkCode">wVirtualKeyCode</Item>
			<Item Name="ScanCode">wVirtualScanCode</Item>
			<Item Name="wchar_t">uChar.UnicodeChar</Item>
			<Item Name="char">uChar.AsciiChar</Item>
			<Synthetic Name="Control keys">
				<DisplayString>RAlt: {(dwControlKeyState &amp; 0x1) != 0}, LAlt: {(dwControlKeyState &amp; 0x2) != 0}, RCtrl: {(dwControlKeyState &amp; 0x4) != 0}, LCtrl: {(dwControlKeyState &amp; 0x8) != 0}, Shift: {(dwControlKeyState &amp; 0x10) != 0}, NumLock: {(dwControlKeyState &amp; 0x20) != 0}, ScrollLock: {(dwControlKeyState &amp; 0x40) != 0}, CapsLock: {(dwControlKeyState &amp; 0x80) != 0}, Enhanced: {(dwControlKeyState &amp; 0x100) != 0}</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="_MOUSE_EVENT_RECORD">
		<Expand>
			<Item Name="Position">dwMousePosition</Item>
			<Synthetic Name="Buttons">
				<DisplayString>Left: {(dwButtonState &amp; 0x1) != 0}, Right: {(dwButtonState &amp; 0x2) != 0}, Middle1: {(dwButtonState &amp; 0x4) != 0}, Middle2: {(dwButtonState &amp; 0x8) != 0}, Middle3: {(dwButtonState &amp; 0x10) != 0}</DisplayString>
			</Synthetic>
			<Synthetic Name="Control keys">
				<DisplayString>RAlt: {(dwControlKeyState &amp; 0x1) != 0}, LAlt: {(dwControlKeyState &amp; 0x2) != 0}, RCtrl: {(dwControlKeyState &amp; 0x4) != 0}, LCtrl: {(dwControlKeyState &amp; 0x8) != 0}, Shift: {(dwControlKeyState &amp; 0x10) != 0}, NumLock: {(dwControlKeyState &amp; 0x20) != 0}, ScrollLock: {(dwControlKeyState &amp; 0x40) != 0}, CapsLock: {(dwControlKeyState &amp; 0x80) != 0}, Enhanced: {(dwControlKeyState &amp; 0x100) != 0}</DisplayString>
			</Synthetic>
			<Synthetic Name="Flags">
				<DisplayString>Moved: {(dwEventFlags &amp; 0x1) != 0}, DoubleClick: {(dwEventFlags &amp; 0x2) != 0}, Wheeled: {(dwEventFlags &amp; 0x4) != 0}, HWheeled: {(dwEventFlags &amp; 0x8) != 0}</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="_WINDOW_BUFFER_SIZE_RECORD">
		<Expand>
			<Item Name="Size">dwSize</Item>
		</Expand>
	</Type>

	<Type Name="_FOCUS_EVENT_RECORD">
		<Expand>
			<Item Name="Focus">bSetFocus != 0</Item>
		</Expand>
	</Type>

	<Type Name="_MENU_EVENT_RECORD">
		<Expand>
			<Item Name="Command">dwCommandId</Item>
		</Expand>
	</Type>

	<Type Name="_INPUT_RECORD">
		<DisplayString Condition="EventType == 0x01">{Event.KeyEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x02">{Event.MouseEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x04">{Event.WindowBufferSizeEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x08">{Event.MenuEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x10">{Event.FocusEvent}</DisplayString>
		<Expand>
			<ExpandedItem Condition="EventType == 0x01">Event.KeyEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x02">Event.MouseEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x04">Event.WindowBufferSizeEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x08">Event.MenuEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x10">Event.FocusEvent</ExpandedItem>
		</Expand>
	</Type>



</AutoVisualizer>
