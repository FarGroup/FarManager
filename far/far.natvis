<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- Override the default visualiser - it doesn't have StringView node :( -->
	<Type Name="std::basic_string_view&lt;*,*&gt;">
		<Intrinsic Name="size" Expression="_Mysize" />
		<Intrinsic Name="data" Expression="_Mydata" />
		<DisplayString>{data(),[size()]na}</DisplayString>
		<StringView>data(),[size()]na</StringView>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<ArrayItems>
				<Size>size()</Size>
				<ValuePointer>data()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="range&lt;*&gt;">
		<DisplayString>{m_Begin,[m_End - m_Begin]na}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">m_End - m_Begin</Item>
			<ArrayItems>
				<Size>m_End - m_Begin</Size>
				<ValuePointer>m_Begin</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="span&lt;*&gt;">
		<DisplayString>{m_Begin,[m_End - m_Begin]na}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">m_End - m_Begin</Item>
			<ArrayItems>
				<Size>m_End - m_Begin</Size>
				<ValuePointer>m_Begin</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="matrix_view&lt;*&gt;">
		<Expand>
			<CustomListItems>
				<Variable Name="i" InitialValue="0"/>
				<Loop>
					<Item Name="row[{i}]">m_Data + i * m_Rows,[m_Cols]na</Item>
					<Exec>++i</Exec>
					<If Condition="i == m_Rows">
						<Break/>
					</If>
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="rectangle_t&lt;*&gt;">
		<DisplayString>[{left} {top} {right} {bottom}]</DisplayString>
		<Expand>
			<Item Name="left">left</Item>
			<Item Name="top">top</Item>
			<Item Name="right">right</Item>
			<Item Name="bottom">bottom</Item>
			<Item Name="width()" ExcludeView="simple">right - left + 1</Item>
			<Item Name="height()" ExcludeView="simple">bottom - top + 1</Item>
		</Expand>
	</Type>

	<Type Name="monitored&lt;*&gt;">
		<DisplayString>{m_Value} [touched={m_Touched}]</DisplayString>
		<StringView>m_Value</StringView>
		<Expand>
			<ExpandedItem>m_Value</ExpandedItem>
			<Item Name="[touched]" ExcludeView="simple">m_Touched</Item>
		</Expand>
	</Type>

	<Type Name="detail::OptionImpl&lt;*,*&gt;">
		<DisplayString>{m_Value}</DisplayString>
		<StringView>m_Value</StringView>
		<Expand>
			<ExpandedItem>m_Value</ExpandedItem>
			<Item Name="[callback]" ExcludeView="simple">m_Callback</Item>
		</Expand>
	</Type>

	<Type Name="movable&lt;*&gt;">
		<DisplayString>{m_Value}</DisplayString>
		<StringView>m_Value</StringView>
	</Type>

	<Type Name="os::detail::handle_t&lt;*&gt;">
		<Intrinsic Name="get" Expression="_Mypair._Myval2" />
		<DisplayString Condition="!get()">empty</DisplayString>
		<DisplayString>{get()}</DisplayString>
	</Type>

	<Type Name="array_ptr&lt;*,*,*&gt;">
		<Intrinsic Name="dynamic" Expression="m_End - m_Begin &gt; StaticSize"/>
		<Intrinsic Name="empty" Expression="m_Begin == m_End"/>
		<Intrinsic Name="ptr" Expression="empty()? nullptr : m_Begin"/>
		<Intrinsic Name="size" Expression="m_End - m_Begin"/>
		<DisplayString Condition="empty()">empty</DisplayString>
		<DisplayString Condition="!empty()">size={size()}, dynamic={dynamic()}</DisplayString>
		<Expand>
			<Item Name="[size]">size()</Item>
			<Item Name="[dynamic]">dynamic()</Item>
			<ArrayItems Condition="!empty()">
				<Size>m_End - m_Begin</Size>
				<ValuePointer>ptr()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="block_ptr&lt;*,*,*&gt;">
		<Expand>
			<Synthetic Name="[Buffer]">
				<DisplayString>{(array_ptr&lt;char,$T2,$T3&gt;&amp;)*this}</DisplayString>
				<Expand>
					<ExpandedItem>(array_ptr&lt;char,$T2,$T3&gt;&amp;)*this</ExpandedItem>
				</Expand>
			</Synthetic>
			<ExpandedItem Condition="!empty()">($T1*)ptr()</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="error_state">
		<DisplayString>{{Win32Error={Win32Error,h} NtError={NtError,h}}}</DisplayString>
		<Expand>
			<Item Name="Win32Error">Win32Error,hr</Item>
			<Item Name="NtError">NtError,hr</Item>
		</Expand>
	</Type>

	<Type Name="error_state_ex">
		<DisplayString>{{{(*(error_state*)this)} What={What}}}</DisplayString>
		<Expand>
			<ExpandedItem>(*(error_state*)this)</ExpandedItem>
			<Item Name="What">What</Item>
		</Expand>
	</Type>

	<Type Name="rgba">
		<DisplayString>{short(r)} {short(g)} {short(b)} {short(a)}</DisplayString>
	</Type>

	<Type Name="FarColor">
		<Intrinsic Name="is_f_rgb" Expression="(Flags &amp; FCF_FG_4BIT) == 0"/>
		<Intrinsic Name="is_b_rgb" Expression="(Flags &amp; FCF_BG_4BIT) == 0"/>
		<Intrinsic Name="is_f_index" Expression="!is_f_rgb() &amp;&amp; (ForegroundColor &amp; 0xf) == Index">
			<Parameter Type="int" Name="Index"/>
		</Intrinsic>
		<Intrinsic Name="is_b_index" Expression="!is_b_rgb() &amp;&amp; (BackgroundColor &amp; 0xf) == Index">
			<Parameter Type="int" Name="Index"/>
		</Intrinsic>
		<Expand>
			<Synthetic Name="Foreground">
				<DisplayString Condition="is_f_rgb()">{ForegroundRGBA}</DisplayString>
				<DisplayString Condition="is_f_index(0x0)">black</DisplayString>
				<DisplayString Condition="is_f_index(0x1)">navy</DisplayString>
				<DisplayString Condition="is_f_index(0x2)">green</DisplayString>
				<DisplayString Condition="is_f_index(0x3)">teal</DisplayString>
				<DisplayString Condition="is_f_index(0x4)">maroon</DisplayString>
				<DisplayString Condition="is_f_index(0x5)">purple</DisplayString>
				<DisplayString Condition="is_f_index(0x6)">olive</DisplayString>
				<DisplayString Condition="is_f_index(0x7)">silver</DisplayString>
				<DisplayString Condition="is_f_index(0x8)">gray</DisplayString>
				<DisplayString Condition="is_f_index(0x9)">blue</DisplayString>
				<DisplayString Condition="is_f_index(0xa)">lime</DisplayString>
				<DisplayString Condition="is_f_index(0xb)">aqua</DisplayString>
				<DisplayString Condition="is_f_index(0xc)">red</DisplayString>
				<DisplayString Condition="is_f_index(0xd)">fuchsia</DisplayString>
				<DisplayString Condition="is_f_index(0xe)">yellow</DisplayString>
				<DisplayString Condition="is_f_index(0xf)">white</DisplayString>
				<Expand>
					<Item Name="index">short(ForegroundIndex.i),xb</Item>
					<Item Name="alpha">short(ForegroundIndex.a)</Item>
				</Expand>
			</Synthetic>
			<Synthetic Name="Background">
				<DisplayString Condition="is_b_rgb()">{BackgroundRGBA}</DisplayString>
				<DisplayString Condition="is_b_index(0x0)">black</DisplayString>
				<DisplayString Condition="is_b_index(0x1)">navy</DisplayString>
				<DisplayString Condition="is_b_index(0x2)">green</DisplayString>
				<DisplayString Condition="is_b_index(0x3)">teal</DisplayString>
				<DisplayString Condition="is_b_index(0x4)">maroon</DisplayString>
				<DisplayString Condition="is_b_index(0x5)">purple</DisplayString>
				<DisplayString Condition="is_b_index(0x6)">olive</DisplayString>
				<DisplayString Condition="is_b_index(0x7)">silver</DisplayString>
				<DisplayString Condition="is_b_index(0x8)">gray</DisplayString>
				<DisplayString Condition="is_b_index(0x9)">blue</DisplayString>
				<DisplayString Condition="is_b_index(0xa)">lime</DisplayString>
				<DisplayString Condition="is_b_index(0xb)">aqua</DisplayString>
				<DisplayString Condition="is_b_index(0xc)">red</DisplayString>
				<DisplayString Condition="is_b_index(0xd)">fuchsia</DisplayString>
				<DisplayString Condition="is_b_index(0xe)">yellow</DisplayString>
				<DisplayString Condition="is_b_index(0xf)">white</DisplayString>
				<Expand>
					<Item Name="index">short(BackgroundIndex.i),xb</Item>
					<Item Name="alpha">short(BackgroundIndex.a)</Item>
				</Expand>
			</Synthetic>
			<Synthetic Name="Flags">
				<DisplayString>{Flags,h}</DisplayString>
				<Expand>
					<Item Name="inherit">bool(Flags &amp; FCF_INHERIT_STYLE)</Item>
					<Item Name="bold">bool(Flags &amp; FCF_FG_BOLD)</Item>
					<Item Name="italic">bool(Flags &amp; FCF_FG_ITALIC)</Item>
					<Item Name="underline">bool(Flags &amp; FCF_FG_UNDERLINE)</Item>
					<Item Name="underline2">bool(Flags &amp; FCF_FG_UNDERLINE2)</Item>
					<Item Name="overline">bool(Flags &amp; FCF_FG_OVERLINE)</Item>
					<Item Name="strikeout">bool(Flags &amp; FCF_FG_STRIKEOUT)</Item>
					<Item Name="faint">bool(Flags &amp; FCF_FG_FAINT)</Item>
					<Item Name="blink">bool(Flags &amp; FCF_FG_BLINK)</Item>
					<Item Name="raw">short((Flags &amp; FCF_RAWATTR_MASK) &gt;&gt; 8),h</Item>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="FAR_CHAR_INFO">
		<DisplayString>{&amp;Char,[1]sub}</DisplayString>
	</Type>

	<Type Name="std::chrono::duration&lt;*, std::ratio&lt;*,*&gt;&gt;">
		<Intrinsic Name="ticks_in_second"       Expression="$T1(1) * $T3 / $T2"/>
		<Intrinsic Name="ticks_in_nanosecond"   Expression="ticks_in_second() / 1000000000"/>
		<Intrinsic Name="ticks_in_microsecond"  Expression="ticks_in_second() / 1000000"/>
		<Intrinsic Name="ticks_in_millisecond"  Expression="ticks_in_second() / 1000"/>
		<Intrinsic Name="ticks_in_minute"       Expression="ticks_in_second() * 60"/>
		<Intrinsic Name="ticks_in_hour"         Expression="ticks_in_minute() * 60"/>
		<Intrinsic Name="ticks_in_day"          Expression="ticks_in_hour() * 24"/>

		<Intrinsic Name="count"        Expression="_MyRep"/>

		<Intrinsic Name="days"         Expression="count()                                       / ticks_in_day()"/>
		<Intrinsic Name="hours"        Expression="count() % ticks_in_day()                      / ticks_in_hour()"/>
		<Intrinsic Name="minutes"      Expression="count() % ticks_in_hour()                     / ticks_in_minute()"/>
		<Intrinsic Name="seconds"      Expression="count() % ticks_in_minute()                   / ticks_in_second()"/>
		<Intrinsic Name="milliseconds" Expression="count() % ticks_in_second()      * 1000       / ticks_in_second()"/>
		<Intrinsic Name="microseconds" Expression="count() % ticks_in_millisecond() * 1000000    / ticks_in_second()"/>
		<Intrinsic Name="nanoseconds"  Expression="count() % ticks_in_microsecond() * 1000000000 / ticks_in_second()"/>

		<DisplayString>[{days()}d {hours()}h {minutes()}m {seconds()}s]</DisplayString>

		<Expand>
			<Item Name="days">days()</Item>
			<Item Name="hours">hours()</Item>
			<Item Name="minutes">minutes()</Item>
			<Item Name="seconds">seconds()</Item>
			<Item Name="milliseconds">milliseconds()</Item>
			<Item Name="microseconds">microseconds()</Item>
			<Item Name="nanoseconds">nanoseconds()</Item>
		</Expand>
	</Type>

	<Type Name="_FILETIME">
		<Intrinsic Name="as_nt_duration" Expression="*(os::chrono::duration*)(this)"/>
		<DisplayString>{as_nt_duration()}</DisplayString>
		<Expand>
			<!-- Same 64-bit representation, save typing -->
			<ExpandedItem>as_nt_duration()</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="std::chrono::time_point&lt;*&gt;">
		<Expand>
			<Item Name="time_since_epoch()">_MyDur</Item>
		</Expand>
	</Type>

	<Type Name="_KEY_EVENT_RECORD">
		<Expand>
			<Item Name="KeyDown">bKeyDown != 0</Item>
			<Item Name="Count">wRepeatCount</Item>
			<Item Name="VkCode">wVirtualKeyCode</Item>
			<Item Name="ScanCode">wVirtualScanCode</Item>
			<Item Name="wchar_t">uChar.UnicodeChar</Item>
			<Item Name="char">uChar.AsciiChar</Item>
			<Synthetic Name="Control keys">
				<DisplayString>RAlt: {(dwControlKeyState &amp; 0x1) != 0}, LAlt: {(dwControlKeyState &amp; 0x2) != 0}, RCtrl: {(dwControlKeyState &amp; 0x4) != 0}, LCtrl: {(dwControlKeyState &amp; 0x8) != 0}, Shift: {(dwControlKeyState &amp; 0x10) != 0}, NumLock: {(dwControlKeyState &amp; 0x20) != 0}, ScrollLock: {(dwControlKeyState &amp; 0x40) != 0}, CapsLock: {(dwControlKeyState &amp; 0x80) != 0}, Enhanced: {(dwControlKeyState &amp; 0x100) != 0}</DisplayString>
			</Synthetic>
		</Expand>
	</Type>
	<Type Name="_MOUSE_EVENT_RECORD">
		<Expand>
			<Item Name="Position">dwMousePosition</Item>
			<Synthetic Name="Buttons">
				<DisplayString>Left: {(dwButtonState &amp; 0x1) != 0}, Right: {(dwButtonState &amp; 0x2) != 0}, Middle1: {(dwButtonState &amp; 0x4) != 0}, Middle2: {(dwButtonState &amp; 0x8) != 0}, Middle3: {(dwButtonState &amp; 0x10) != 0}</DisplayString>
			</Synthetic>
			<Synthetic Name="Control keys">
				<DisplayString>RAlt: {(dwControlKeyState &amp; 0x1) != 0}, LAlt: {(dwControlKeyState &amp; 0x2) != 0}, RCtrl: {(dwControlKeyState &amp; 0x4) != 0}, LCtrl: {(dwControlKeyState &amp; 0x8) != 0}, Shift: {(dwControlKeyState &amp; 0x10) != 0}, NumLock: {(dwControlKeyState &amp; 0x20) != 0}, ScrollLock: {(dwControlKeyState &amp; 0x40) != 0}, CapsLock: {(dwControlKeyState &amp; 0x80) != 0}, Enhanced: {(dwControlKeyState &amp; 0x100) != 0}</DisplayString>
			</Synthetic>
			<Synthetic Name="Flags">
				<DisplayString>Moved: {(dwEventFlags &amp; 0x1) != 0}, DoubleClick: {(dwEventFlags &amp; 0x2) != 0}, Wheeled: {(dwEventFlags &amp; 0x4) != 0}, HWheeled: {(dwEventFlags &amp; 0x8) != 0}</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="_WINDOW_BUFFER_SIZE_RECORD">
		<Expand>
			<Item Name="Size">dwSize</Item>
		</Expand>
	</Type>

	<Type Name="_FOCUS_EVENT_RECORD">
		<Expand>
			<Item Name="Focus">bSetFocus != 0</Item>
		</Expand>
	</Type>

	<Type Name="_MENU_EVENT_RECORD">
		<Expand>
			<Item Name="Command">dwCommandId</Item>
		</Expand>
	</Type>

	<Type Name="_INPUT_RECORD">
		<DisplayString Condition="EventType == 0x01">{Event.KeyEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x02">{Event.MouseEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x04">{Event.WindowBufferSizeEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x08">{Event.MenuEvent}</DisplayString>
		<DisplayString Condition="EventType == 0x10">{Event.FocusEvent}</DisplayString>
		<Expand>
			<ExpandedItem Condition="EventType == 0x01">Event.KeyEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x02">Event.MouseEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x04">Event.WindowBufferSizeEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x08">Event.MenuEvent</ExpandedItem>
			<ExpandedItem Condition="EventType == 0x10">Event.FocusEvent</ExpandedItem>
		</Expand>
	</Type>



</AutoVisualizer>
