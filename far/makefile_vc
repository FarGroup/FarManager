#The following variables can be set by the user:
#
#DEBUG - set if a debug build is needed
#
#LINK_ULINK - set if you want to use ulink for linking
#
#VC - set Visual C++ version (VC=14 for 2015, VC=15 for 2017, default is 14, we try to autodetect if not set)
#
#AMD64 or CPU=AMD64 - set for x64 build
#IA64 or CPU=IA64 - for IA64 build
#ARM or CPU=ARM - for ARM build
#
#(we try to autodetect if not set)
#
#
#FARSYSLOG - for syslog
#
#USE_ANALYZE - for /analyze
#
#DISABLE_WOW64_HOOK - set to disable the wow64 hook
#
#DEFFILE - name of user file to include
#
#NO_RELEASE_PDB - set to disable pdb generation in Release mode
#
#NO_RELEASE_LTCG - set to disable link-time code generation in Release mode
#
#ASM_LISTING - set to enable assembly, machine code and source listing generation
#
#LTCG_STATUS - specifies whether the linker displays a progress indicator that shows what percentage of the link is complete
#
#MP_LIMIT - specifies the maximum number of processes that the compiler can create
#
#DEFUSERFLAGS -

.SILENT:

#include for user defines if needed
!ifdef DEFFILE
!include $(DEFFILE)
!endif

!if defined(AMD64) || "$(CPU)" == "AMD64" || "$(PLATFORM)" == "X64" || "$(PLATFORM)" == "x64"
!undef CPU
AMD64=1
DIRBIT=64
!elseif defined(IA64) || "$(CPU)" == "IA64" || "$(PLATFORM)" == "Itanium"
!undef CPU
IA64=1
DIRBIT=IA64
!elseif defined(ARM) || "$(CPU)" == "ARM" || "$(PLATFORM)" == "ARM"
!undef CPU
ARM=1
DIRBIT=ARM
!else
X86=1
DIRBIT=32
!endif

!if !defined(VC) && defined(_NMAKE_VER)

!if "$(_NMAKE_VER)">"14.10"
VC=15
!elseif "$(_NMAKE_VER)">"14"
VC=14
!else
#default
VC=14
!endif
!endif

!ifndef DEBUG
DIRNAME=Release
USEDEBUG=NDEBUG
!else
DIRNAME=Debug
USEDEBUG=_DEBUG
!endif

DEPFILE=bootstrap\far.vc.dep
STATICDEPFILE=static.dep

OUTDIR=$(DIRNAME).$(DIRBIT).vc

FARINCLUDE=Include

LINK=link.exe
ULINK=ulink.exe
M4=tools\m4 -P -DFARBIT=$(DIRBIT)
GAWK=tools\gawk

INTDIR=$(OUTDIR)\obj
!ifdef FARSYSLOG
INTDIR=$(INTDIR)log
!endif

CODDIR=$(OUTDIR)\cod

RES_FILE = "$(INTDIR)\far.res"

PCH_FILE = "$(INTDIR)\headers.pch"

LINK_OBJS = \
	"$(INTDIR)\sqlite.obj" \
	"$(INTDIR)\sqlite_unicode.obj" \
	"$(INTDIR)\cache.obj" \
	"$(INTDIR)\cddrv.obj" \
	"$(INTDIR)\chgprior.obj" \
	"$(INTDIR)\clipboard.obj" \
	"$(INTDIR)\cmdline.obj" \
	"$(INTDIR)\codepage_selection.obj" \
	"$(INTDIR)\colormix.obj" \
	"$(INTDIR)\components.obj" \
	"$(INTDIR)\config.obj" \
	"$(INTDIR)\configdb.obj" \
	"$(INTDIR)\console.obj" \
	"$(INTDIR)\console_session.obj" \
	"$(INTDIR)\constitle.obj" \
	"$(INTDIR)\copy.obj" \
	"$(INTDIR)\copy_progress.obj" \
	"$(INTDIR)\ctrlobj.obj" \
	"$(INTDIR)\cvtname.obj" \
	"$(INTDIR)\datetime.obj" \
	"$(INTDIR)\delete.obj" \
	"$(INTDIR)\desktop.obj" \
	"$(INTDIR)\dialog.obj" \
	"$(INTDIR)\dirinfo.obj" \
	"$(INTDIR)\dirmix.obj" \
	"$(INTDIR)\diskmenu.obj" \
	"$(INTDIR)\dizlist.obj" \
	"$(INTDIR)\dlgedit.obj" \
	"$(INTDIR)\drivemix.obj" \
	"$(INTDIR)\edit.obj" \
	"$(INTDIR)\editcontrol.obj" \
	"$(INTDIR)\editor.obj" \
	"$(INTDIR)\eject.obj" \
	"$(INTDIR)\elevation.obj" \
	"$(INTDIR)\encoding.obj" \
	"$(INTDIR)\eol.obj" \
	"$(INTDIR)\exception.obj" \
	"$(INTDIR)\execute.obj" \
	"$(INTDIR)\FarDlgBuilder.obj" \
	"$(INTDIR)\farexcpt.obj" \
	"$(INTDIR)\farversion.obj" \
	"$(INTDIR)\fileattr.obj" \
	"$(INTDIR)\fileedit.obj" \
	"$(INTDIR)\filefilter.obj" \
	"$(INTDIR)\filefilterparams.obj" \
	"$(INTDIR)\filelist.obj" \
	"$(INTDIR)\filemasks.obj" \
	"$(INTDIR)\fileowner.obj" \
	"$(INTDIR)\filepanels.obj" \
	"$(INTDIR)\filestr.obj" \
	"$(INTDIR)\filesystemwatcher.obj" \
	"$(INTDIR)\filetype.obj" \
	"$(INTDIR)\fileview.obj" \
	"$(INTDIR)\findfile.obj" \
	"$(INTDIR)\flink.obj" \
	"$(INTDIR)\fnparce.obj" \
	"$(INTDIR)\format.obj" \
	"$(INTDIR)\foldtree.obj" \
	"$(INTDIR)\global.obj" \
	"$(INTDIR)\grabber.obj" \
	"$(INTDIR)\headers.obj" \
	"$(INTDIR)\help.obj" \
	"$(INTDIR)\hilight.obj" \
	"$(INTDIR)\history.obj" \
	"$(INTDIR)\hmenu.obj" \
	"$(INTDIR)\hotplug.obj" \
	"$(INTDIR)\imports.obj"\
	"$(INTDIR)\initguid.obj"\
	"$(INTDIR)\infolist.obj" \
	"$(INTDIR)\interf.obj" \
	"$(INTDIR)\keybar.obj" \
	"$(INTDIR)\keyboard.obj" \
	"$(INTDIR)\language.obj" \
	"$(INTDIR)\lasterror.obj" \
	"$(INTDIR)\locale.obj" \
	"$(INTDIR)\lockscrn.obj" \
	"$(INTDIR)\macro.obj" \
	"$(INTDIR)\main.obj" \
	"$(INTDIR)\manager.obj" \
	"$(INTDIR)\memcheck.obj" \
	"$(INTDIR)\menubar.obj" \
	"$(INTDIR)\message.obj" \
	"$(INTDIR)\mix.obj" \
	"$(INTDIR)\mkdir.obj" \
	"$(INTDIR)\modal.obj" \
	"$(INTDIR)\namelist.obj" \
	"$(INTDIR)\network.obj" \
	"$(INTDIR)\new_handler.obj" \
	"$(INTDIR)\notification.obj" \
	"$(INTDIR)\nsUniversalDetectorEx.obj" \
	"$(INTDIR)\palette.obj" \
	"$(INTDIR)\panel.obj" \
	"$(INTDIR)\panelmix.obj" \
	"$(INTDIR)\pathmix.obj" \
	"$(INTDIR)\pipe.obj" \
	"$(INTDIR)\platform.obj" \
	"$(INTDIR)\platform.chrono.obj" \
	"$(INTDIR)\platform.concurrency.obj" \
	"$(INTDIR)\platform.env.obj" \
	"$(INTDIR)\platform.fs.obj" \
	"$(INTDIR)\platform.memory.obj" \
	"$(INTDIR)\platform.reg.obj" \
	"$(INTDIR)\platform.security.obj" \
	"$(INTDIR)\plclass.obj" \
	"$(INTDIR)\plist.obj" \
	"$(INTDIR)\plugapi.obj" \
	"$(INTDIR)\PluginA.obj" \
	"$(INTDIR)\plugins.obj" \
	"$(INTDIR)\plugsettings.obj" \
	"$(INTDIR)\poscache.obj" \
	"$(INTDIR)\preservelongname.obj" \
	"$(INTDIR)\preservestyle.obj" \
	"$(INTDIR)\print.obj" \
	"$(INTDIR)\processname.obj" \
	"$(INTDIR)\qview.obj" \
	"$(INTDIR)\refreshwindowmanager.obj" \
	"$(INTDIR)\RegExp.obj" \
	"$(INTDIR)\savescr.obj" \
	"$(INTDIR)\scantree.obj" \
	"$(INTDIR)\scrbuf.obj" \
	"$(INTDIR)\scrobj.obj" \
	"$(INTDIR)\scrsaver.obj" \
	"$(INTDIR)\setattr.obj" \
	"$(INTDIR)\setcolor.obj" \
	"$(INTDIR)\shortcuts.obj" \
	"$(INTDIR)\sqlitedb.obj" \
	"$(INTDIR)\stddlg.obj" \
	"$(INTDIR)\string_sort.obj" \
	"$(INTDIR)\string_utils.obj" \
	"$(INTDIR)\strmix.obj" \
	"$(INTDIR)\syslog.obj" \
	"$(INTDIR)\tinyxml.obj" \
	"$(INTDIR)\taskbar.obj" \
	"$(INTDIR)\tracer.obj" \
	"$(INTDIR)\treelist.obj" \
	"$(INTDIR)\tvar.obj" \
	"$(INTDIR)\usermenu.obj" \
	"$(INTDIR)\viewer.obj" \
	"$(INTDIR)\vmenu.obj" \
	"$(INTDIR)\vmenu2.obj" \
	"$(INTDIR)\window.obj" \
	"$(INTDIR)\wm_listener.obj" \
	"$(INTDIR)\xlat.obj" \
!if defined(X86)
!if !defined(DISABLE_WOW64_HOOK)
	"$(INTDIR)\hook_wow64.obj" \
!endif
!ifndef LINK_ULINK
	"$(INTDIR)\vc_crt_fix.obj" \
	"$(INTDIR)\vc_crt_fix_impl.obj" \
!else
	"$(INTDIR)\vc_crt_fix_ulink.obj"
!endif
!endif

LINK_LIBS=kernel32.lib user32.lib winspool.lib advapi32.lib shell32.lib netapi32.lib mpr.lib ole32.lib psapi.lib secur32.lib setupapi.lib rpcrt4.lib version.lib userenv.lib

TEST_OBJS = "$(INTDIR)\api_test_c.testobj" "$(INTDIR)\api_test_c++.testobj"

DEFINES=\
	/D "UNICODE"\
	/D "_UNICODE"\
	/D "$(USEDEBUG)"\
	/D "FAR_ALPHA_VERSION"\
!ifdef DEBUG
	/D "SYSLOG"\
	/D "SYSLOG_FARSYSLOG"\
!endif
!ifdef ARM
	/D "_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE"\
!endif
	/D "_ENABLE_EXTENDED_ALIGNED_STORAGE"\
	/D "_HAS_AUTO_PTR_ETC=0"\
	/D "_CRT_SECURE_NO_WARNINGS"

DISABLED_WARNINGS=/FI disabled_warnings.hpp

# common
CPPFLAGS=/nologo /MP$(MP_LIMIT) /Wall $(DISABLED_WARNINGS) $(DEFUSERFLAGS) $(FARSYSLOG) $(DEFINES) /EHsc /Gy /GF /Fd"$(INTDIR)\\" /J /Zc:rvalueCast,inline,strictStrings,throwingNew,referenceBinding /std:c++latest /c
LINKFLAGS=/nologo /subsystem:console /release /nxcompat /largeaddressaware /dynamicbase /map /out:"$(OUTDIR)\Far.exe"
ULINKFLAGS=-q -m- -ap -Gz -O- -o- -Gh -Gh- -GF:LARGEADDRESSAWARE -d*kernel32
RFLAGS=/nologo /l 0x409 /fo"$(RES_FILE)" /d $(USEDEBUG)

# config-specific
!ifdef DEBUG
CPPFLAGS=$(CPPFLAGS) /MTd /Od /ZI
LINKFLAGS=$(LINKFLAGS) /debug
ULINKFLAGS=$(ULINKFLAGS) -v
!else
CPPFLAGS=$(CPPFLAGS) /MT /O2
!ifndef NO_RELEASE_LTCG
!ifndef LINK_ULINK
CPPFLAGS=$(CPPFLAGS) /GL
!endif
!endif
!ifndef NO_RELEASE_PDB
CPPFLAGS=$(CPPFLAGS) /Zi
LINKFLAGS=$(LINKFLAGS) /debug
!endif
LINKFLAGS=$(LINKFLAGS) /incremental:no /OPT:REF /OPT:ICF
!ifndef NO_RELEASE_LTCG
LINKFLAGS=$(LINKFLAGS) /ltcg
!ifdef LTCG_STATUS
LINKFLAGS=$(LINKFLAGS) /ltcg:status
!endif
!endif
!endif

!ifdef ASM_LISTING
CPPFLAGS=$(CPPFLAGS) /FAcs /Fa"$(CODDIR)\\"
!endif

!ifdef USE_ANALYZE
CPPFLAGS=$(CPPFLAGS) /analyze
!endif


# platform-specific
!ifdef X86
CPPFLAGS=$(CPPFLAGS) /arch:IA32
!ifndef DEBUG
CPPFLAGS=$(CPPFLAGS) /Oy-
!endif
LINKFLAGS=$(LINKFLAGS) /machine:i386
OS_VERSION=5.0
!elseifdef AMD64
LINKFLAGS=$(LINKFLAGS) /machine:amd64
ULINKFLAGS=$(ULINKFLAGS) -Tpe+
OS_VERSION=5.2
!elseifdef IA64
LINKFLAGS=$(LINKFLAGS) /machine:IA64
!elseifdef ARM
OS_VERSION=5.2
LINKFLAGS=$(LINKFLAGS) /machine:ARM
!endif

# compiler-specific
!if "$(VC)"=="15"
CPPFLAGS=$(CPPFLAGS) /permissive- /diagnostics:caret
!endif

!ifdef ICL
CPP = icl
LINK = xilink
CPPFLAGS = $(CPPFLAGS) /Qstd=c++11 /Qdiag-disable:672,869,2415,3280
!endif

CPPFLAGS = $(CPPFLAGS) /Fo"$(INTDIR)\\"

ALL: AllDirs lng depfile include docs $(TEST_OBJS)
	$(MAKE) /nologo /f makefile_vc build USEDEPS=1

.PHONY: lng
lng: bootstrap\farlang.templ
	@echo Generating language files
	tools\lng.generator.exe -nc -i bootstrap\lang.ini -ol "$(OUTDIR)" bootstrap\farlang.templ

.PHONY: depfile
depfile:
	@echo Rebuilding dependencies...
	dir /b *.cpp *.hpp *.c *.rc > bootstrap\mkdep.list
	$(GAWK) -f scripts\mkdep.awk bootstrap\mkdep.list > $(DEPFILE)
	del bootstrap\mkdep.list

.PHONY: include
include: \
	"$(FARINCLUDE)\PluginW.pas" \
	"$(FARINCLUDE)\FarColorW.pas" \
	"$(FARINCLUDE)\farcolor.hpp" \
	"$(FARINCLUDE)\plugin.hpp" \
	"$(FARINCLUDE)\DlgBuilder.hpp" \
	"$(FARINCLUDE)\vc_crt_fix_impl.cpp" \
	"$(FARINCLUDE)\vc_crt_fix.asm" \
	"$(FARINCLUDE)\vc_crt_fix_ulink.cpp"

.PHONY: docs
docs: \
	"$(OUTDIR)\FarEng.hlf"\
	"$(OUTDIR)\FarRus.hlf"\
	"$(OUTDIR)\FarHun.hlf"\
	"$(OUTDIR)\File_id.diz"\
	"$(OUTDIR)\Far.exe.example.ini"

.PHONY: build
build: "$(OUTDIR)\Far.exe"
	@echo Fixing subsystem version
	editbin /nologo /subsystem:console,$(OS_VERSION) /osversion:$(OS_VERSION) $(OUTDIR)\Far.exe > $(INTDIR)\version_fix.log

.PHONY: AllDirs
AllDirs:
	if not exist "bootstrap" mkdir "bootstrap"
	if not exist "$(OUTDIR)\" mkdir "$(OUTDIR)"
	if not exist "$(FARINCLUDE)\" mkdir "$(FARINCLUDE)"
	if not exist "$(INTDIR)\" mkdir "$(INTDIR)"
!ifdef ASM_LISTING
	if not exist "$(CODDIR)\" mkdir "$(CODDIR)"
!endif

"$(OUTDIR)\Far.exe": $(PCH_FILE) $(LINK_OBJS) $(RES_FILE) bootstrap\copyright.inc bootstrap\farversion.inc
	@echo Linking $@
!ifndef LINK_ULINK
	$(LINK) @<<
	$(LINKFLAGS) $(LINK_OBJS) $(RES_FILE) $(LINK_LIBS)
<<
!else
	$(ULINK) +- @+<<
	$(ULINKFLAGS) $(LINK_OBJS)
	,"$(OUTDIR)\Far.exe","$(OUTDIR)\Far.map"
	,$(LINK_LIBS)
	,far.def,"$(RES_FILE)"
<<
!endif

$(PCH_FILE): headers.cpp headers.hpp
	@echo Making precompiled headers
	$(CPP) $(CPPFLAGS) headers.cpp /Yc /Fp"$(PCH_FILE)"

$(INTDIR)\initguid.obj: initguid.cpp
	$(CPP) $(CPPFLAGS) initguid.cpp

$(INTDIR)\hook_wow64.obj: hook_wow64.cpp
	$(CPP) $(CPPFLAGS) hook_wow64.cpp

$(INTDIR)\vc_crt_fix_impl.obj: vc_crt_fix_impl.cpp
	$(CPP) $(CPPFLAGS) /Zc:threadSafeInit- vc_crt_fix_impl.cpp

$(INTDIR)\vc_crt_fix_ulink.obj: vc_crt_fix_ulink.cpp
	$(CPP) $(CPPFLAGS) vc_crt_fix_ulink.cpp

.c{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) $<
<<

.cpp{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) /Yuheaders.hpp /Fp"$(PCH_FILE)" /FI headers.hpp /FI memcheck.hpp $<
<<

#Do not use $(AS) here - nmake incorrectly substitutes ml64 when compiling in amd64_x86 environment
.asm{$(INTDIR)}.obj:
	ml /nologo /c /Fo$@ $<

$(RES_FILE): far.rc Far.ico FarA.ico bootstrap\Far.exe.manifest
	@echo Compiling resource file
	$(RC) $(RFLAGS) far.rc

!ifdef USEDEPS
!include "$(DEPFILE)"
!include "$(STATICDEPFILE)"
!endif

$(INTDIR)\api_test_c.testobj: $(FARINCLUDE)/plugin.hpp $(FARINCLUDE)/farcolor.hpp api_test.c
	@echo Testing C plugin API
	$(CPP) /nologo /c /Fo"$@" /TC api_test.c

$(INTDIR)\api_test_c++.testobj: $(FARINCLUDE)/plugin.hpp $(FARINCLUDE)/farcolor.hpp $(FARINCLUDE)/DlgBuilder.hpp api_test.c
	@echo Testing C++ plugin API
	$(CPP) /nologo /c /Fo"$@" /TP api_test.c

MSG=@echo Generating $@

bootstrap\Far.exe.manifest \
bootstrap\copyright.inc \
bootstrap\farversion.inc \
bootstrap\farlang.templ \
bootstrap\far.rc.inc \
$(OUTDIR)\File_id.diz: $(@F).m4 farversion.m4 tools.m4 vbuild.m4
	$(MSG)
	$(M4) $(@F).m4 > $@

$(FARINCLUDE)\vc_crt_fix_impl.cpp \
$(FARINCLUDE)\plugin.hpp \
$(FARINCLUDE)\DlgBuilder.hpp \
$(FARINCLUDE)\farcolor.hpp: $(@F) farversion.m4 tools.m4 vbuild.m4
	$(MSG)
	$(M4) -DINPUT=$(@F) headers.m4 > $@

$(OUTDIR)\FarEng.hlf \
$(OUTDIR)\FarRus.hlf \
$(OUTDIR)\FarHun.hlf: $(@F).m4 farversion.m4 tools.m4 vbuild.m4
	$(MSG)
	$(GAWK) -f scripts\mkhlf.awk $(@F).m4 | $(M4) > $@

$(OUTDIR)\Far.exe.example.ini: $(@F)
	$(MSG)
	copy /Y $(@F) $@ > nul

$(FARINCLUDE)\PluginW.pas \
$(FARINCLUDE)\FarColorW.pas: $(@F) farversion.m4 tools.m4 vbuild.m4
	$(MSG)
	$(M4) -DINPUT=$(@F) headers.m4 > $@

$(FARINCLUDE)\vc_crt_fix.asm \
$(FARINCLUDE)\vc_crt_fix_ulink.cpp: $(@F)
	$(MSG)
	copy /Y $(@F) $@ > nul

.PHONY: CLEAN
CLEAN:
	@echo Cleaning
	for %%i in (\
	"$(INTDIR)"\
	"$(CODDIR)"\
	"bootstrap"\
	"$(OUTDIR)\Far.exe"\
	"$(OUTDIR)\Far.exp"\
	"$(OUTDIR)\Far.lib"\
	"$(OUTDIR)\Far.map"\
	"$(OUTDIR)\Far.pdb"\
	"$(OUTDIR)\*.hlf"\
	"$(OUTDIR)\*.lng"\
	"$(OUTDIR)\File_id.diz"\
	"$(OUTDIR)\Far.exe.example.ini"\
	"Include\*.*"\
	) do @if exist %%i del /q /f %%i
