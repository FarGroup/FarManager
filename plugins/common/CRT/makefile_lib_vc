ROOT_PATH=../../
!include ../../makefile_vc_base

CC=$(_BIN_PATH_)cl.exe
LIBR=$(_BIN_PATH_)lib.exe

!if "$(BUILD_PLATFORM)" == "AMD64"
OBJDIR = obj.64.vc
DLLNAME = libCRT64.lib
MASM=$(_BIN_PATH_)ml64.exe
!elseif "$(BUILD_PLATFORM)" == "IA64"
OBJDIR = obj.IA64.vc
DLLNAME = libCRTIA64.lib
!else
OBJDIR = obj.32.vc
DLLNAME = libCRT.lib
MASM=$(_BIN_PATH_)ml.exe
MASM_OPT=/coff
!endif
OUTDIR = ..

!ifdef VC8
COMPAT64=/Wp64
NOWIN98=/OPT:NOWIN98
!endif

!if "$(BUILD_PLATFORM)" == "X86"
LINK32_OBJS = \
$(OBJDIR)\vc_ftol.obj \
$(OBJDIR)\vc_lldiv.obj \
$(OBJDIR)\vc_lldvrm.obj \
$(OBJDIR)\vc_llmul.obj \
$(OBJDIR)\vc_llrem.obj \
$(OBJDIR)\vc_llshl.obj \
$(OBJDIR)\vc_llshr.obj \
$(OBJDIR)\vc_ulldiv.obj \
$(OBJDIR)\vc_ulldvrm.obj \
$(OBJDIR)\vc_ullrem.obj \
$(OBJDIR)\vc_ullshr.obj
!endif

LINK_OBJS = $(LINK32_OBJS) \
$(OBJDIR)\calloc.obj \
$(OBJDIR)\delete.obj \
$(OBJDIR)\delete_array.obj \
$(OBJDIR)\free.obj \
$(OBJDIR)\i64toa.obj \
$(OBJDIR)\malloc.obj \
$(OBJDIR)\memchr.obj \
$(OBJDIR)\memcmp.obj \
$(OBJDIR)\memcpy.obj \
$(OBJDIR)\memicmp.obj \
$(OBJDIR)\memmove.obj \
$(OBJDIR)\memset.obj \
$(OBJDIR)\new.obj \
$(OBJDIR)\new_array.obj \
$(OBJDIR)\realloc.obj \
$(OBJDIR)\strchr.obj \
$(OBJDIR)\strcpy.obj \
$(OBJDIR)\strcspn.obj \
$(OBJDIR)\strdup.obj \
$(OBJDIR)\strncat.obj \
$(OBJDIR)\strncmp.obj \
$(OBJDIR)\strncpy.obj \
$(OBJDIR)\strpbrk.obj \
$(OBJDIR)\strrchr.obj \
$(OBJDIR)\strstr.obj \
$(OBJDIR)\strtok.obj \
$(OBJDIR)\strtol.obj \
$(OBJDIR)\swab.obj

CPP_BASE=/MP /nologo /c /Gy /J /Gr /GR- /GS- /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS /D_INC_CTYPE /DUNICODE /D_UNICODE /DNDEBUG /FC /GF /Gm- /EHs-c- /LD /Oi /O1 /Os /TP /W3 /WX- /Zc:forScope /Zc:inline /Zc:threadSafeInit- /Zc:wchar_t $(ENV_INC_OPT)
!ifdef AMD64
CPP_PROJ=$(CPP_BASE) /Oy /Zp8 $(COMPAT64)
!elseif defined(IA64) 
CPP_PROJ=$(CPP_BASE) /Zp8 $(COMPAT64)
!else
CPP_PROJ=$(CPP_BASE) /Oy
!endif

LINK_FLAGS=/nologo /nodefaultlib /out:"$(OUTDIR)\$(DLLNAME)"

ALL: dirs $(OUTDIR)\$(DLLNAME)

$(OUTDIR)\$(DLLNAME) : $(LINK_OBJS)
!ifndef __MAKE__
	@$(LIBR) @<<
	$(LINK_FLAGS) $(LINK_OBJS)
<<
!else
	@$(LIBR) @&&<
	$(LINK_FLAGS) $(LINK_OBJS)
<
!endif

!ifdef __MAKE__
.path.c=.
.path.cpp=.
.path.h=.
.path.hpp=.
.path.asm=.
!endif

!ifndef __MAKE__
.cpp{$(OBJDIR)}.obj::
	@$(CC) @<<
	$(CPP_PROJ) /Fo"$(OBJDIR)\\" $<
<<
!else
.cpp{$(OBJDIR)}.obj:
	@$(CC) $(CPP_PROJ) /Fo"$(OBJDIR)\\" { $< }
!endif

.asm{$(OBJDIR)}.obj:
	@$(MASM) /nologo $(MASM_OPT) /c /Fo$@ $<


$(OBJDIR)\calloc.obj: calloc.cpp crt.hpp
$(OBJDIR)\delete.obj: delete.cpp crt.hpp
$(OBJDIR)\delete_array.obj: delete_array.cpp crt.hpp
$(OBJDIR)\free.obj: free.cpp crt.hpp
$(OBJDIR)\i64toa.obj: i64toa.cpp crt.hpp
$(OBJDIR)\malloc.obj: malloc.cpp crt.hpp
$(OBJDIR)\memchr.obj: memchr.cpp crt.hpp
$(OBJDIR)\memcmp.obj: memcmp.cpp crt.hpp
$(OBJDIR)\memcpy.obj: memcpy.cpp crt.hpp
$(OBJDIR)\memicmp.obj: memicmp.cpp crt.hpp
$(OBJDIR)\memmove.obj: memmove.cpp crt.hpp
$(OBJDIR)\memset.obj: memset.cpp crt.hpp
$(OBJDIR)\new.obj: new.cpp crt.hpp crt.hpp
$(OBJDIR)\new_array.obj: new_array.cpp crt.hpp
$(OBJDIR)\realloc.obj: realloc.cpp crt.hpp
$(OBJDIR)\strchr.obj: strchr.cpp crt.hpp
$(OBJDIR)\strcpy.obj: strcpy.cpp crt.hpp
$(OBJDIR)\strcspn.obj: strcspn.cpp crt.hpp
$(OBJDIR)\strdup.obj: strdup.cpp crt.hpp
$(OBJDIR)\strncat.obj: strncat.cpp crt.hpp
$(OBJDIR)\strncmp.obj: strncmp.cpp crt.hpp
$(OBJDIR)\strncpy.obj: strncpy.cpp crt.hpp
$(OBJDIR)\strpbrk.obj: strpbrk.cpp crt.hpp
$(OBJDIR)\strrchr.obj: strrchr.cpp crt.hpp
$(OBJDIR)\strstr.obj: strstr.cpp crt.hpp
$(OBJDIR)\strtok.obj: strtok.cpp crt.hpp
$(OBJDIR)\strtol.obj: strtol.cpp crt.hpp
$(OBJDIR)\swab.obj: swab.cpp crt.hpp

.PHONY: dirs
dirs:
	@if not exist "$(OBJDIR)\$(NULL)" mkdir "$(OBJDIR)"
